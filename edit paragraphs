import pandas as pd
import re

def insert_newlines(input_string):
    # Case 1: Insert newline between a letter and a number
    input_string = re.sub(r'([a-zA-Z])([0-9])', r'\1\n\2', input_string)
    
    # Case 2: Insert newline between lowercase and uppercase letters
    input_string = re.sub(r'([a-z])([A-Z])', r'\1\n\2', input_string)
    
    # Case 3: Insert newline after semicolon only if not followed by a space and any word
    input_string = re.sub(r';(?! )', r';\n', input_string)
    
    # Case 4: Insert newline before hyphen if no space in between
    input_string = re.sub(r'([^ ])(-)', r'\1\n\2', input_string)
    
    # Case 5: Insert newline before and after special character if no space in between
    input_string = re.sub(r'([^ ])([•])', r'\1\n\2', input_string)
    input_string = re.sub(r'([•])([^ \n])', r'\1\n\2', input_string)

    return input_string


def insert_new_lines(text):
    # Define a regex pattern to match list items
    pattern = r'(?<!^)\s*(?=(?:\(\s*(?:[ivxlcdm]+|[a-zA-Z])\s*\)))'
    
    # Replace matches with a newline followed by the match
    updated_text = re.sub(pattern, r'\n', text)
    
    return updated_text


# Example DataFrame
data = {
    'column_name': [
        "G1.01",
        "GoNasdaq",
        "Gomeow;meow",
        "Hello;-hehe-bla",
        "Insane•blabla•cute",
        "Example; test"
    ]
}
df = pd.DataFrame(data)

# Apply insert_newlines function to each cell in the column
df['column_name'] = df['column_name'].apply(insert_newlines)

# Print the modified DataFrame
print(df)
